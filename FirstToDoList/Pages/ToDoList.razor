@page "/todolist"
@using System.ComponentModel.DataAnnotations;
@using FirstToDoList.Services
@using FirstToDoListBlazor.Model
@using FirstToDoListBlazor.Components
@inject ToDoServices ToDoServices

<PageTitle>TODO List</PageTitle>

<h1>TODO List</h1>

<span class="" role="status"> <em>Here you can add a task to your ToDo List:</em></span>

    <div class="form-group">
    <div class="col">
        <button class="btn btn-primary" @onclick="AddTask">Add a Task</button>
        <InputText type="text" id="task" name="task" @bind-Value="task"/>
    </div>
    </div>

<hr>

<span class="" role="status"><em>ToDo List:</em></span>
<div class="form-group">
<div class="col col-md-4">
    <div class="col">
        @foreach (string task in model.ToDoList)
        {
            @if(!string.IsNullOrWhiteSpace(task) && !task.All(Char.IsDigit))
            {
                <div class="col">
                    <button class="btn btn-outline-success" >Done</button>
                    <button class="btn btn-outline-danger" @onclick=@(_ =>RemoveTask(task))>Remove</button>
                    <span>@task</span>
                </div>
            }
       }
    </div>
</div>
</div>

@code {
    public ToDoListModel model = new();

    [Required]
    [StringLength(100, ErrorMessage = "Task name is too long")]
    string task;
    public bool DeleteDialogOpen {get; set; }
    private void OnDeleteDialogClose(bool accepted)
    {
        DeleteDialogOpen = false;
        StateHasChanged();
    }
    private void OpenDeleteDialog()
    {
        DeleteDialogOpen = true;
        StateHasChanged();
    }
    private async Task AddTask()
    {
        if(!model.ToDoList.Contains(task))
        {
            model.ToDoList.Add(task);
        }
        await ToDoServices.Save(model);
        task = "";
    }

    private async Task RemoveTask(string task)
    {
        model.ToDoList.Remove(task);
        await ToDoServices.Save(model);

    }    
    private void SaveTask()
    {
        model.ToDoList.Add(task);
    }
    

    protected async override Task OnInitializedAsync()
    {
        await ToDoServices.GetListFromDB(model);
    }
}
    
