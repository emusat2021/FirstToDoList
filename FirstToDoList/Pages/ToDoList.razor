@page "/todolist"
@using System.ComponentModel.DataAnnotations;
@using FirstToDoList.Services
@using FirstToDoListBlazor.Model
@using FirstToDoListBlazor.Components
@inject ToDoServices ToDoServices

<PageTitle>TODO List</PageTitle>

<h1>TODO List</h1>

<span class="" role="status"> <em>Here you can add a task to your ToDo List:</em></span>

    <div class="form-group">
    <div class="col">
        <button class="btn btn-primary" @onclick="AddTask">Add a Task</button>
        <InputText type="text" id="task" name="task" @bind-Value="task"/>
        
    </div>
    @if(errorMessage!="")
    {
    <div>
        @errorMessage
    </div>

    }
    </div>

<hr>

<span class="" role="status"><em>ToDo List:</em></span>
<div class="form-group">
<div class="col col-md-4">
    <div class="col">
        @foreach (var toDoListEntry in model.ToDoList)
        {
            @* @if(!string.IsNullOrWhiteSpace(task) && !task.All(Char.IsDigit))
            { *@
                <div class="col">
                    <button class="btn btn-outline-success" >Done</button>
                    <button class="btn btn-outline-danger" @onclick=@(_ =>RemoveTask(toDoListEntry.TaskName))>Remove</button>
                    <span>@toDoListEntry.TaskName</span>
                </div>
            @* } *@
       }
    </div>
</div>
</div>

@code {
    public ToDoListModel model = new();

    string task;

    string errorMessage="";
    
    private async Task AddTask()
    {
        if(!model.ToDoList.Any( entry => entry.TaskName == task)&& !string.IsNullOrWhiteSpace(task) && !task.All(Char.IsDigit))
        {
            var toDoListEntry = new ToDoListEntry();
            toDoListEntry.TaskName = task;
            model.ToDoList.Add(toDoListEntry);
    
            errorMessage="";
        }
        else
        {
            errorMessage = "Your task name is invalid";
        }

        await ToDoServices.Save(model);
        task = "";
    }

    private async Task RemoveTask(string task)
    {
        model.ToDoList.RemoveAll(entry => entry.TaskName == task);
        await ToDoServices.Save(model);

    }    

    protected async override Task OnInitializedAsync()
    {
        await ToDoServices.GetListFromDB(model);
    }
}
    
