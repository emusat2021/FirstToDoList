@page "/todolist"
@using FirstToDoList.Services;
@using FirstToDoListBlazor.Model;
@inject ToDoServices ToDoServices;


<PageTitle>TODO List</PageTitle>

<h1>TODO List</h1>

<p role="status">Current List:</p>
<div class="col">
    <button class="btn btn-primary" @onclick="AddTask">Add a Task</button>
    <input type="text" id="task" name="task" @bind="task">
</div>
<div class="col col-md-4">
    <div class="col">
        @foreach (string task in model.ToDoList)
        {
            @if(!string.IsNullOrWhiteSpace(task))
            {
                <div class="col">
                    <button class="btn btn-outline-success" >Done</button>
                    <button class="btn btn-outline-danger" @onclick=@(_ =>RemoveTask(task))>Remove</button>
                    <TextBlock class=""> @task</TextBlock>
                </div>
            }
        }
    </div>
</div>

@code {
    public ToDoListModel model = new();

    string task;

    private async Task AddTask()
    {
        if(!model.ToDoList.Contains(task))
        {
            model.ToDoList.Add(task);
        }
        await ToDoServices.Save(model);
        task = "";
    }

    private async Task RemoveTask(string task)
    {
        model.ToDoList.Remove(task);
        await ToDoServices.Save(model);

    }    
    private void SaveTask()
    {
        model.ToDoList.Add(task);
    }
    protected override void OnInitialized()
    {
        ToDoServices.GetListFromDB(model);
    }

}
       @* task = "<del style=text-decoration:line-through>task</del>"; *@
       @* task.Attributes.Add("task", "text-decoration: line-through;"); *@
       @* task = task.Style["text-decoration"] = "line-through"; *@
       @* model.ToDoList.Add(<span style=text-decoration: line-through> @task</span>); *@
