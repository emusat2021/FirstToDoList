@page "/todolist"
@using System.ComponentModel.DataAnnotations;
@using FirstToDoListBlazor.Services;
@using FirstToDoListBlazor.Model;
@using FirstToDoListBlazor.Components;
@inject ToDoServicePGAdmin toDoServicePGAdmin


<PageTitle>TODO List</PageTitle>

<h1>TODO List</h1>

<span class="" role="status"> <em>Here you can add a task to your ToDo List:</em></span>

    <div class="form-group">
    <div class="col">
        <button class="btn btn-primary" @onclick="AddTask">Add a Task</button>
        <InputText type="text" id="task" name="task" @bind-Value="task"/>
        
    </div>
    @if(errorMessage!="")
    {
    <div>
       <span class="badge bg-warning text-dark"> @errorMessage </span>
    </div>

    }
    </div>

<hr>

<span class="" role="status"><em>ToDo List:</em></span>
<div class="form-group">
<div class="col col-md-4">
    <div class="col">
        @foreach (var toDoListEntry in model.ToDoList)
        {
            <div class="col">
                @if(toDoListEntry.DoneTask)
                {
                    <button class="btn btn-outline-success" @onclick=@(_ =>ToggleDone(toDoListEntry.TaskName))>NotDone</button>
                }
                else
                {
                    <button class="btn btn-outline-success" @onclick=@(_ =>ToggleDone(toDoListEntry.TaskName)) >Done</button>
                }
                <button class="btn btn-outline-danger" @onclick=@(_ =>RemoveTask(toDoListEntry.TaskName))>Remove</button>
                @if(toDoListEntry.DoneTask)
                {
                    <span style="text-decoration: line-through;">@toDoListEntry.TaskName</span>

                }
                else
                {
                    <span >@toDoListEntry.TaskName</span>
                }


            </div>
       }
    </div>
</div>
</div>

@code {
    public ToDoListModel model = new ToDoListModel {Id = "1"};
  
    string task;

    string errorMessage="";

    private async Task AddTask()
    {
        if(!model.ToDoList.Any( entry => entry.TaskName == task)&& !string.IsNullOrWhiteSpace(task) && !task.All(Char.IsDigit))
        {
            var toDoListEntry = new ToDoListEntry();
            toDoListEntry.TaskName = task;
            toDoListEntry.DoneTask = false;
            model.ToDoList.Add(toDoListEntry);
    
            errorMessage="";
        }
        else
        {
            errorMessage = "Your task name is invalid";
        }

        await toDoServicePGAdmin.Save(model);
        task = "";
    }

    private async Task RemoveTask(string task)
    {
        // entry intererate in the list.
        // If the expression entry.TaskName == is true then Remove the specific entry
        model.ToDoList.RemoveAll(entry => entry.TaskName == task);
        await toDoServicePGAdmin.Save(model);

    }
    private async Task ToggleDone(string task)
    {
        foreach(var element in model.ToDoList)
        {
            if(element.TaskName == task)
            {
                element.DoneTask = !element.DoneTask;
            }

        }
        await toDoServicePGAdmin.Save(model);

    }  

    protected async override Task OnInitializedAsync()
    {
        model = (await toDoServicePGAdmin.FindAll()).FirstOrDefault() ?? new ToDoListModel{Id = "1"};

    }
}
    
